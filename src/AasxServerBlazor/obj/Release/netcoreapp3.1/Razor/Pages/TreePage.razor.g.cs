#pragma checksum "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor" "{8829d00f-11b8-4213-878b-770e8597ac16}" "d0bee07ceac8ce4c24a1f1b4e873d23989b2ad160b874feafe3e6fa7299a3751"
// <auto-generated/>
#pragma warning disable 1591
namespace AasxServerBlazor.Pages
{
    #line hidden
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\_Imports.razor"
using AasxServerBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\_Imports.razor"
using AasxServerBlazor.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using Microsoft.IdentityModel.Tokens;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using System.Net;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using QRCoder;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using System.Drawing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using AasxServerBlazor.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using static AdminShellNS.AdminShellV20;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using static AasxServerStandardBib.TimeSeriesPlotting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 466 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using AasxServer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 467 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using AdminShellNS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 468 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 469 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 470 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 471 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using Newtonsoft.Json.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 472 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
using ScottPlot;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class TreePage : global::Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.OpenElement(0, "div");
            __builder.AddAttribute(1, "class", "col-12 row");
            __builder.AddMarkupContent(2, "\n    <br>\n    ");
            __builder.OpenElement(3, "div");
            __builder.AddAttribute(4, "class", "col-4");
            __builder.AddAttribute(5, "style", "border-width:3px; border-style: solid; border-color: blue; border-radius: 8px; word-wrap: break-word; word-break: break-all; position: sticky");
            __builder.AddMarkupContent(6, "\n        ");
#nullable restore
#line 18 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(7, updateVisibleTree(Items, selectedNode));

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(8, "\n");
#nullable restore
#line 19 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
         if (Program.isLoading)
        {

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(9, "<span style=\"color:white;background-color:blue;\">Loading...</span>");
#nullable restore
#line 20 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                           }
        else
        { IO.Swagger.Registry.Controllers.RegistryAndDiscoveryInterfaceApiController.initRegistry(DateTime.UtcNow); }

#line default
#line hidden
#nullable disable
            __builder.AddContent(10, "        ");
            global::__Blazor.AasxServerBlazor.Pages.TreePage.TypeInference.CreateTree_0(__builder, 11, 12, 
#nullable restore
#line 23 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                     Items

#line default
#line hidden
#nullable disable
            , 13, 
#nullable restore
#line 23 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                             item => item.Childs

#line default
#line hidden
#nullable disable
            , 14, 
#nullable restore
#line 26 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                               item => item.Childs?.Any() == true

#line default
#line hidden
#nullable disable
            , 15, 
#nullable restore
#line 27 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        item => GetHtmlId(item)

#line default
#line hidden
#nullable disable
            , 16, 
#nullable restore
#line 24 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                  SelectedNode

#line default
#line hidden
#nullable disable
            , 17, global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => SelectedNode = __value, SelectedNode)), 18, 
#nullable restore
#line 25 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                   ExpandedNodes

#line default
#line hidden
#nullable disable
            , 19, global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => ExpandedNodes = __value, ExpandedNodes)), 20, (context) => (__builder2) => {
                __builder2.AddMarkupContent(21, "\n");
#nullable restore
#line 29 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                   //// SubmodelService.syncSubTree(context);
                

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                  
                    string color = "color:white;background-color:blue;";
                    if (context is ExtensionItem)
                        color = "color:white;background-color:green;";
                

#line default
#line hidden
#nullable disable
                __builder2.AddContent(22, "                ");
                __builder2.OpenElement(23, "span");
                __builder2.AddAttribute(24, "style", 
#nullable restore
#line 36 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                             color

#line default
#line hidden
#nullable disable
                );
#nullable restore
#line 36 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder2.AddContent(25, ViewNodeType(context));

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(26, "\n                ");
#nullable restore
#line 37 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder2.AddContent(27, ViewNodeID(context));

#line default
#line hidden
#nullable disable
#nullable restore
#line 37 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder2.AddContent(28, ViewNodeInfo(context));

#line default
#line hidden
#nullable disable
                __builder2.AddMarkupContent(29, "\n                ");
                __builder2.OpenElement(30, "strong");
                __builder2.OpenElement(31, "span");
                __builder2.AddAttribute(32, "style", "color:blue");
#nullable restore
#line 38 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder2.AddContent(33, getSymbols(context));

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.CloseElement();
                __builder2.AddMarkupContent(34, "\n                ");
                __builder2.OpenElement(35, "span");
                __builder2.AddAttribute(36, "style", "color:lightgray;");
#nullable restore
#line 39 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder2.AddContent(37, ViewTimeStamp(context));

#line default
#line hidden
#nullable disable
                __builder2.CloseElement();
                __builder2.AddMarkupContent(38, "\n            ");
            }
            );
            __builder.AddMarkupContent(39, "\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(40, "\n    ");
            __builder.OpenElement(41, "div");
            __builder.AddAttribute(42, "class", "col-8");
            __builder.AddAttribute(43, "style", "border-width: 3px; border-style: solid; border-color: blue; border-radius: 8px; position: sticky");
            __builder.AddMarkupContent(44, "\n        ");
            __builder.OpenElement(45, "div");
            __builder.AddAttribute(46, "class", "sticky-top");
            __builder.AddAttribute(47, "style", "word-wrap:break-word;word-break:break-all;");
            __builder.AddMarkupContent(48, "\n");
            __builder.AddContent(49, "                ");
            __builder.OpenElement(50, "span");
            __builder.AddAttribute(51, "style", "color:white;background-color:blue;");
            __builder.AddAttribute(52, "id", "SelectedNodeInfoType");
#nullable restore
#line 46 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(53, ViewNodeType(selectedNode));

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(54, "\n                ");
            __builder.OpenElement(55, "span");
            __builder.AddAttribute(56, "id", "SelectedNodeInfoId");
#nullable restore
#line 47 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(57, ViewNodeID(selectedNode));

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(58, "<br>\n");
#nullable restore
#line 48 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                for (int line = 0; line < 6; line++)
                {
                    string nodeDetails0 = ViewNodeDetails(selectedNode, line, 0);
                    string nodeDetails1 = ViewNodeDetails(selectedNode, line, 1);
                    string nodeDetails2 = ViewNodeDetails(selectedNode, line, 2);
                    if (nodeDetails0?.Length > 0 && nodeDetails1?.Length > 0)
                    {
                        string detailsId = "SelectedNodeDetailsLeft_" + line;

#line default
#line hidden
#nullable disable
            __builder.AddContent(59, "                        ");
            __builder.OpenElement(60, "span");
            __builder.AddAttribute(61, "style", "color:white;background-color:blue;");
            __builder.AddAttribute(62, "id", 
#nullable restore
#line 56 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                              detailsId

#line default
#line hidden
#nullable disable
            );
#nullable restore
#line 56 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(63, nodeDetails0);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(64, "\n");
#nullable restore
#line 57 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        detailsId = "SelectedNodeDetailsRight_" + line;

#line default
#line hidden
#nullable disable
            __builder.AddContent(65, "                        ");
            __builder.OpenElement(66, "span");
            __builder.AddAttribute(67, "id", 
#nullable restore
#line 58 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                   detailsId

#line default
#line hidden
#nullable disable
            );
#nullable restore
#line 58 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(68, nodeDetails1);

#line default
#line hidden
#nullable disable
            __builder.AddContent(69, " ");
#nullable restore
#line 58 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(70, nodeDetails2);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(71, "<br>\n");
#nullable restore
#line 59 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                    }
                }
                if (selectedNode is ExtensionItem && (selectedNode as ExtensionItem).extension != null)
                {
                    var fragment = (selectedNode as ExtensionItem).extension.GetFragment(selectedNode);
                    if (fragment != null)
                    {
                        var encodedFragment = Base64UrlEncoder.Encode(fragment);

                        string detailsId = "SelectedNodeDetailsLeft_fragment";

#line default
#line hidden
#nullable disable
            __builder.AddContent(72, "                        ");
            __builder.OpenElement(73, "span");
            __builder.AddAttribute(74, "style", "color:white;background-color:blue;");
            __builder.AddAttribute(75, "id", 
#nullable restore
#line 69 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                              detailsId

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(76, "Fragment");
            __builder.CloseElement();
            __builder.AddMarkupContent(77, "\n");
#nullable restore
#line 70 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        detailsId = "SelectedNodeDetailsRight_fragment";
                        if (fragment.Length > 0)
                        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(78, "                            ");
            __builder.OpenElement(79, "span");
            __builder.AddAttribute(80, "id", 
#nullable restore
#line 73 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                       detailsId

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(81, "\"");
#nullable restore
#line 73 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(82, fragment);

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(83, "\" ==> \"");
#nullable restore
#line 73 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(84, encodedFragment);

#line default
#line hidden
#nullable disable
            __builder.AddContent(85, "\"");
            __builder.CloseElement();
            __builder.AddMarkupContent(86, "<br>\n");
#nullable restore
#line 74 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"

                        }
                        else
                        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(87, "                            ");
            __builder.OpenElement(88, "span");
            __builder.AddAttribute(89, "id", 
#nullable restore
#line 78 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                       detailsId

#line default
#line hidden
#nullable disable
            );
            __builder.AddMarkupContent(90, "(empty string) ==> (empty string)");
            __builder.CloseElement();
            __builder.AddMarkupContent(91, "<br>\n");
#nullable restore
#line 79 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        }

                        var restURL = (selectedNode as ExtensionItem).extension.GetRestURL(selectedNode);

                        if (restURL != null)
                        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(92, "                            ");
            __builder.OpenElement(93, "span");
            __builder.AddAttribute(94, "style", "color:white;background-color:blue;");
            __builder.AddAttribute(95, "id", 
#nullable restore
#line 85 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                                  detailsId

#line default
#line hidden
#nullable disable
            );
            __builder.AddContent(96, "Rest URL");
            __builder.CloseElement();
            __builder.AddMarkupContent(97, "\n                            ");
            __builder.OpenElement(98, "a");
            __builder.AddAttribute(99, "href", 
#nullable restore
#line 86 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                      restURL

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(100, "target", "_blank");
#nullable restore
#line 86 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(101, restURL);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(102, "<br>\n");
#nullable restore
#line 87 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        }

                        var downloadLink = (selectedNode as ExtensionItem).extension.GetDownloadLink(selectedNode);
                        if (downloadLink != null)
                        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(103, "                            ");
            __builder.OpenElement(104, "button");
            __builder.AddAttribute(105, "style", "margin-bottom: 5px");
            __builder.AddAttribute(106, "onclick", "window.location.href" + " =" + " \'" + (
#nullable restore
#line 92 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                                                 downloadLink

#line default
#line hidden
#nullable disable
            ) + "\';" + " ");
            __builder.AddContent(107, "Download");
            __builder.CloseElement();
            __builder.AddMarkupContent(108, "<br>\n");
#nullable restore
#line 93 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        }

                    }
                }
                if (selectedNode != null && selectedNode.Tag is Referable r)
                {

#line default
#line hidden
#nullable disable
            __builder.AddContent(109, "                    ");
            __builder.OpenElement(110, "span");
            __builder.AddAttribute(111, "style", "color:lightgray;");
            __builder.AddContent(112, "UPDATE ");
#nullable restore
#line 99 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(113, r.TimeStamp.ToString("yy-MM-dd HH:mm:ss.fff"));

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(114, "<br>\n                    ");
            __builder.OpenElement(115, "button");
            __builder.AddAttribute(116, "style", "border-width: 1px; border-color: black; background-color: lightgray");
            __builder.AddAttribute(117, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 100 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                                                                  setTimeStamp

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(118, "TIMESTAMP");
            __builder.CloseElement();
            __builder.AddMarkupContent(119, "<br>\n                    ");
            __builder.OpenElement(120, "span");
            __builder.AddAttribute(121, "style", "color:lightgray;");
            __builder.AddContent(122, "CREATE ");
#nullable restore
#line 101 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(123, r.TimeStampCreate.ToString("yy-MM-dd HH:mm:ss.fff"));

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(124, "<br>\n");
#nullable restore
#line 107 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                     
                }
                // if (selectedNode != null && hasDownloadFile(selectedNode))
                // {
                //     <button @onclick="DownloadFile">Download File</button><br>
                //     <img src="test.jpg" alt="Thumbnail" />
                // }
                bool externalLink = false;
                string link = getLink(selectedNode, out externalLink);
                if (selectedNode != null && link != "")
                {

#line default
#line hidden
#nullable disable
            __builder.AddContent(125, "                    ");
            __builder.OpenElement(126, "button");
            __builder.AddAttribute(127, "style", "margin-bottom: 5px");
            __builder.AddAttribute(128, "onclick", "window.location.href" + " =" + " \'" + (
#nullable restore
#line 118 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                                         link

#line default
#line hidden
#nullable disable
            ) + "\';" + " ");
            __builder.AddContent(129, "Download");
            __builder.CloseElement();
            __builder.AddMarkupContent(130, "\n                    ");
            __builder.OpenElement(131, "button");
            __builder.AddAttribute(132, "style", "margin-bottom: 5px");
            __builder.AddAttribute(133, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 119 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                 save

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(134, " Save ");
            __builder.CloseElement();
            __builder.AddMarkupContent(135, "\n                    <br>\n");
#nullable restore
#line 121 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                    if (selectedNode != null && selectedNode.Tag is Submodel && Program.connectServer != "")
                    {
                        bool toPublish = Program.submodelsToPublish.Contains(selectedNode.Tag);
                        bool toSubscribe = Program.submodelsToSubscribe.Contains(selectedNode.Tag);
                        if (toPublish)
                        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(136, "                            ");
            __builder.OpenElement(137, "button");
            __builder.AddAttribute(138, "style", "color:white;background-color:blue");
            __builder.AddAttribute(139, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 127 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                                        resetSubmodelToPublish

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(140, "Publish");
            __builder.CloseElement();
            __builder.AddMarkupContent(141, "\n");
#nullable restore
#line 128 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        }
                        else
                        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(142, "                            ");
            __builder.OpenElement(143, "button");
            __builder.AddAttribute(144, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 131 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                              setSubmodelToPublish

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(145, "Publish");
            __builder.CloseElement();
            __builder.AddMarkupContent(146, "\n");
#nullable restore
#line 132 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        }
                        if (toSubscribe)
                        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(147, "                            ");
            __builder.OpenElement(148, "button");
            __builder.AddAttribute(149, "style", "color:white;background-color:blue");
            __builder.AddAttribute(150, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 135 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                                        resetSubmodelToSubscribe

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(151, "Subscribe");
            __builder.CloseElement();
            __builder.AddMarkupContent(152, "\n");
#nullable restore
#line 136 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        }
                        else
                        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(153, "                            ");
            __builder.OpenElement(154, "button");
            __builder.AddAttribute(155, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 139 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                              setSubmodelToSubscribe

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(156, "Subscribe");
            __builder.CloseElement();
            __builder.AddMarkupContent(157, "\n");
#nullable restore
#line 140 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        }
                        // <button onclick="window.location.href = '@link';">Subscribe</button><br>
                        

#line default
#line hidden
#nullable disable
#nullable restore
#line 169 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                         
                    }
                }
                if (selectedNode != null && selectedNode.Tag is Property && Program.edit)
                {
                    // <input @bind="CurrentValue" @bind:event="oninput" /> <span style="color:white;background-color:blue;">@CurrentValue</span><br>

#line default
#line hidden
#nullable disable
            __builder.AddContent(158, "                    ");
            __builder.OpenElement(159, "input");
            __builder.AddAttribute(160, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 175 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                  CurrentValue

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(161, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => CurrentValue = __value, CurrentValue));
            __builder.SetUpdatesAttributeName("value");
            __builder.CloseElement();
            __builder.AddContent(162, " ");
            __builder.OpenElement(163, "span");
            __builder.AddAttribute(164, "style", "border-width: 1px; border-color: black; background-color: blue;");
#nullable restore
#line 175 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(165, CurrentValue);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(166, "<br>\n");
#nullable restore
#line 176 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                       
                    if (CurrentValue != null && CurrentValue != "")
                    {
                        if (selectedNode.Tag is Property)
                        {
                            (selectedNode.Tag as Property).value = CurrentValue;
                            (selectedNode.Tag as Property).setTimeStamp(DateTime.UtcNow);
                            this.StateHasChanged();
                        }
                        // string fname = Path.GetFileName(Program.envFileName[selectedNode.envIndex]);
                        // Program.env[selectedNode.envIndex].SaveAs("./temp/" + fname);
                        // System.IO.File.Copy("./temp/" + fname, Path.Combine(Program.DataPath, fname), true);
                        CurrentValue = "";
                    }
                }
                if (selectedNode != null && (selectedNode.Tag is AdministrationShell || selectedNode.Tag is AdminShellNS.AdminShellV20.File))
                {
                    if (selectedNode.Tag is AdministrationShell)
                    {

#line default
#line hidden
#nullable disable
            __builder.AddContent(167, "                        ");
            __builder.OpenElement(168, "button");
            __builder.AddAttribute(169, "style", "border-width: 1px; border-color: black; color: white; background-color: blue");
            __builder.AddAttribute(170, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 195 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                                                                               runCreateQRCodeImage

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(171, "QRCODE");
            __builder.CloseElement();
            __builder.AddMarkupContent(172, "<br>\n");
#nullable restore
#line 196 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        string qrcodeLink = getQRCodeLink(selectedNode);
                        if (Program.generatedQrCodes.ContainsKey(selectedNode.Tag))
                        {
                            string qrcodeImage = getQRCodeImage(selectedNode);
                            if (qrcodeImage != "")
                            {

#line default
#line hidden
#nullable disable
            __builder.AddContent(173, "                                ");
            __builder.OpenElement(174, "a");
            __builder.AddAttribute(175, "href", 
#nullable restore
#line 202 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                          qrcodeLink

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(176, "target", "_blank");
            __builder.AddMarkupContent(177, "\n                                    ");
            __builder.OpenElement(178, "div");
            __builder.AddMarkupContent(179, "\n                                        ");
            __builder.OpenElement(180, "img");
            __builder.AddAttribute(181, "src", "data:image;base64," + (
#nullable restore
#line 204 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                    qrcodeImage

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(182, "style", "max-width: 25%;");
            __builder.AddAttribute(183, "alt", "Qrcode Image");
            __builder.CloseElement();
            __builder.AddMarkupContent(184, "\n                                    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(185, "\n                                ");
            __builder.CloseElement();
            __builder.AddMarkupContent(186, "\n");
#nullable restore
#line 207 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                            }
                        }
                        else
                        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(187, "                            ");
            __builder.OpenElement(188, "a");
            __builder.AddAttribute(189, "href", 
#nullable restore
#line 211 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                      qrcodeLink

#line default
#line hidden
#nullable disable
            );
            __builder.AddAttribute(190, "target", "_blank");
#nullable restore
#line 211 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(191, qrcodeLink);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(192, "<br>\n");
#nullable restore
#line 212 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        }
                        

#line default
#line hidden
#nullable disable
#nullable restore
#line 218 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                         
                    }
                }

                if (selectedNode != null && selectedNode.Tag is SubmodelElementCollection smc)
                {
                    string semanticId = "";
                    // bool render = false;

                    try
                    {
                        semanticId = smc.semanticId.Keys[0].value;
                    }
                    catch { }
                    if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeries/1/0" ||
                        semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
                    {
                        TimeSpan diff = smc.TimeStamp - timeStampPlot;

                        if (smc != collectionPlot || diff.TotalSeconds < 0 || diff.TotalSeconds >= 5)
                        {
                            watchTimeToProcessImage = System.Diagnostics.Stopwatch.StartNew();

                            collectionPlot = smc;
                            timeStampPlot = smc.TimeStamp;

                            //ListOfTimeSeriesData _timeSeriesData = new ListOfTimeSeriesData();
                            _timeSeriesData.Clear();
                            var mm = AdminShell.Key.MatchMode.Relaxed;

                            // make initial data for time series
                            var tsd = new TimeSeriesData() { SourceTimeSeries = smc };
                            _timeSeriesData.Add(tsd);

                            // plot arguments for time series
                            tsd.Args = PlotArguments.Parse(smc.HasQualifierOfType("TimeSeries.Args")?.value);

                            // TODO: info - ZveiTimeSeriesDataV10 is currently hardcoded as JSON string in code
                            var pcts = ZveiTimeSeriesDataV10.Static;

                            var tssReference = pcts.CD_TimeSeriesSegment.GetReference();
                            //var k = new Key("ConceptDescription", false, "IRI", "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0");
                            //var tssReference = new Reference(k);
                            //var smcAllValues = smc.value.FindAllSemanticIdAs<AdminShell.SubmodelElementCollection>(tssReference, mm);

            // is it a segment
            try
            {
                if (semanticId == "https://admin-shell.io/sandbox/zvei/TimeSeriesData/TimeSeriesSegment/1/0")
                {
                    TimeSeriesAddSegmentData(pcts, mm, tsd, smc);
                }
                else
                {
                    // search for segements on current level
                    var smcAllValues = smc.value.FindAllSemanticIdAs<AdminShell.SubmodelElementCollection>(tssReference, mm);

            if (smcAllValues.Count() != 0)
            {
                foreach (var smcseg in smcAllValues)
                {
                    TimeSeriesAddSegmentData(pcts, mm, tsd, smcseg);
                }
            }
        }
    }
    catch
    {
    };

    _timeSeriesData?.RenderTimeSeries(defPlotHeight: 200, "en", bi.sessionNumber, plotFilter.combinedFromDate, plotFilter.combinedToDate);
    watchTimeToProcessImage.Stop();
}

byte[] imageArray;
string timeSeriesImageBase64 = "";
string scottplotImgPath = "wwwroot/images/scottplot/smc_timeseries_clientid" + bi.sessionNumber + ".png";

if (System.IO.File.Exists(scottplotImgPath))
{
    imageArray = System.IO.File.ReadAllBytes(scottplotImgPath);
    timeSeriesImageBase64 = Convert.ToBase64String(imageArray);
}

var elapsedMsToProcessImage = watchTimeToProcessImage.ElapsedMilliseconds;

if (System.IO.File.Exists(scottplotImgPath))
{

#line default
#line hidden
#nullable disable
            __builder.AddContent(193, "        ");
            __builder.OpenComponent<global::Microsoft.AspNetCore.Components.Forms.EditForm>(194);
            __builder.AddAttribute(195, "Model", (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::System.Object>(
#nullable restore
#line 306 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                          plotFilter

#line default
#line hidden
#nullable disable
            )));
            __builder.AddAttribute(196, "OnValidSubmit", (object)(global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.TypeCheck<global::Microsoft.AspNetCore.Components.EventCallback<global::Microsoft.AspNetCore.Components.Forms.EditContext>>(global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Forms.EditContext>(this, 
#nullable restore
#line 306 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                     () => plotFilter.UpdateFilter(_timeSeriesData, bi.sessionNumber)

#line default
#line hidden
#nullable disable
            ))));
            __builder.AddAttribute(197, "ChildContent", (global::Microsoft.AspNetCore.Components.RenderFragment<Microsoft.AspNetCore.Components.Forms.EditContext>)((context) => (__builder2) => {
                __builder2.AddMarkupContent(198, "\n            ");
                __builder2.AddMarkupContent(199, "<label for=\"filterFromDate\">Filter from</label>\n            ");
                global::__Blazor.AasxServerBlazor.Pages.TreePage.TypeInference.CreateInputDate_1(__builder2, 200, 201, "filterFromDate", 202, 
#nullable restore
#line 308 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                        plotFilter.fromDate

#line default
#line hidden
#nullable disable
                , 203, global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => plotFilter.fromDate = __value, plotFilter.fromDate)), 204, () => plotFilter.fromDate);
                __builder2.AddMarkupContent(205, "\n            ");
                __builder2.OpenElement(206, "input");
                __builder2.AddAttribute(207, "type", "time");
                __builder2.AddAttribute(208, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 309 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                            plotFilter.fromTime

#line default
#line hidden
#nullable disable
                , format: "HH:mm:ss", culture: global::System.Globalization.CultureInfo.InvariantCulture));
                __builder2.AddAttribute(209, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => plotFilter.fromTime = __value, plotFilter.fromTime, format: "HH:mm:ss", culture: global::System.Globalization.CultureInfo.InvariantCulture));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(210, "\n            ");
                __builder2.AddMarkupContent(211, "<label for=\"filterToDate\">Filter to</label>\n            ");
                global::__Blazor.AasxServerBlazor.Pages.TreePage.TypeInference.CreateInputDate_2(__builder2, 212, 213, "filterToDate", 214, 
#nullable restore
#line 311 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                      plotFilter.toDate

#line default
#line hidden
#nullable disable
                , 215, global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create(this, global::Microsoft.AspNetCore.Components.CompilerServices.RuntimeHelpers.CreateInferredEventCallback(this, __value => plotFilter.toDate = __value, plotFilter.toDate)), 216, () => plotFilter.toDate);
                __builder2.AddMarkupContent(217, "\n            ");
                __builder2.OpenElement(218, "input");
                __builder2.AddAttribute(219, "type", "time");
                __builder2.AddAttribute(220, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 312 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                            plotFilter.toTime

#line default
#line hidden
#nullable disable
                , format: "HH:mm:ss", culture: global::System.Globalization.CultureInfo.InvariantCulture));
                __builder2.AddAttribute(221, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => plotFilter.toTime = __value, plotFilter.toTime, format: "HH:mm:ss", culture: global::System.Globalization.CultureInfo.InvariantCulture));
                __builder2.SetUpdatesAttributeName("value");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(222, "\n            ");
                __builder2.OpenElement(223, "div");
                __builder2.AddMarkupContent(224, "\n                ");
                __builder2.AddMarkupContent(225, "<button type=\"submit\">Apply</button>\n                ");
                __builder2.OpenElement(226, "button");
                __builder2.AddAttribute(227, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 315 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                  plotFilter.SetInitialFilterState

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddContent(228, "Reset");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(229, "\n                ");
                __builder2.OpenElement(230, "button");
                __builder2.AddAttribute(231, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 316 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                  () => { plotFilterTsdOffset = 0; plotFilter.SetFilterStateDay(0); }

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddContent(232, "Today");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(233, "\n                ");
                __builder2.OpenElement(234, "button");
                __builder2.AddAttribute(235, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 317 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                  () => { plotFilterTsdOffset = -1; plotFilter.SetFilterStateDay(-1); }

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddContent(236, "Yesterday");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(237, "\n                ");
                __builder2.OpenElement(238, "button");
                __builder2.AddAttribute(239, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 318 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                  () => plotFilter.SetFilterStateDay(--plotFilterTsdOffset)

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddContent(240, "Prev day");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(241, "\n                ");
                __builder2.OpenElement(242, "button");
                __builder2.AddAttribute(243, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 319 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                  () => plotFilter.SetFilterStateDay(++plotFilterTsdOffset)

#line default
#line hidden
#nullable disable
                ));
                __builder2.AddContent(244, "Next day");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(245, "\n            ");
                __builder2.CloseElement();
                __builder2.AddMarkupContent(246, "\n        ");
            }
            ));
            __builder.CloseComponent();
            __builder.AddMarkupContent(247, "\n");
            __builder.AddContent(248, "        ");
            __builder.OpenElement(249, "div");
            __builder.AddAttribute(250, "class", "d-flex flex-column");
            __builder.AddMarkupContent(251, "\n            ");
            __builder.OpenElement(252, "img");
            __builder.AddAttribute(253, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 324 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                           () => showImageModal = !showImageModal

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(254, "src", "data:image;base64," + (
#nullable restore
#line 324 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                                          timeSeriesImageBase64

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(255, "alt", "Visualization of time series");
            __builder.AddAttribute(256, "style", "max-width:950px;cursor:zoom-in;");
            __builder.CloseElement();
            __builder.AddMarkupContent(257, "\n            ");
            __builder.OpenElement(258, "span");
            __builder.AddAttribute(259, "class", "text-muted");
            __builder.AddAttribute(260, "style", "font-size:14px;");
            __builder.AddMarkupContent(261, "\n                Image processing took ");
#nullable restore
#line 326 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(262, elapsedMsToProcessImage);

#line default
#line hidden
#nullable disable
            __builder.AddContent(263, " ms (Last update: ");
#nullable restore
#line 326 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(264, timeStampPlot.ToString("yy-MM-dd HH:mm:ss.fff"));

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(265, ")\n            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(266, "\n        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(267, "\n");
            __builder.AddContent(268, "        ");
            __builder.OpenElement(269, "div");
            __builder.AddAttribute(270, "class", "modal" + " modal-fullscreen" + " " + (
#nullable restore
#line 330 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                             showImageModal ? " d-block" : "d-none" 

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(271, "style", "margin-top:3.5rem;");
            __builder.AddAttribute(272, "tabindex", "-1");
            __builder.AddMarkupContent(273, "\n            ");
            __builder.OpenElement(274, "div");
            __builder.AddAttribute(275, "class", "modal-dialog");
            __builder.AddMarkupContent(276, "\n                ");
            __builder.OpenElement(277, "div");
            __builder.AddAttribute(278, "class", "modal-content");
            __builder.AddMarkupContent(279, "\n                    ");
            __builder.OpenElement(280, "div");
            __builder.AddAttribute(281, "class", "modal-header");
            __builder.AddMarkupContent(282, "\n                        ");
            __builder.AddMarkupContent(283, "<h5 class=\"modal-title\">Visualization of time series</h5>\n                        ");
            __builder.OpenElement(284, "button");
            __builder.AddAttribute(285, "type", "button");
            __builder.AddAttribute(286, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 335 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                        () => showImageModal = !showImageModal

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(287, "class", "close");
            __builder.AddAttribute(288, "data-dismiss", "modal");
            __builder.AddAttribute(289, "aria-label", "Close");
            __builder.AddMarkupContent(290, "\n                            ");
            __builder.AddMarkupContent(291, "<span aria-hidden=\"true\">&times;</span>\n                        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(292, "\n                    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(293, "\n                    ");
            __builder.OpenElement(294, "div");
            __builder.AddAttribute(295, "class", "modal-body text-center");
            __builder.AddMarkupContent(296, "\n                        ");
            __builder.OpenElement(297, "img");
            __builder.AddAttribute(298, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 340 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                       () => showImageModal = !showImageModal

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(299, "src", "data:image;base64," + (
#nullable restore
#line 340 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                                                                      timeSeriesImageBase64

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(300, "alt", "Visualization of time series");
            __builder.AddAttribute(301, "style", "max-width:90%;max-height:90%;cursor:zoom-out;");
            __builder.AddAttribute(302, "class", "mb-2");
            __builder.CloseElement();
            __builder.AddMarkupContent(303, "\n                    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(304, "\n                ");
            __builder.CloseElement();
            __builder.AddMarkupContent(305, "\n            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(306, "\n        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(307, "\n");
#nullable restore
#line 345 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
    }
    else
    {

#line default
#line hidden
#nullable disable
            __builder.AddContent(308, "        ");
            __builder.AddMarkupContent(309, "<div class=\"my-2\">Rendering time series...</div>\n");
#nullable restore
#line 349 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
    }
}
else
{
    collectionPlot = null;
}
}

        if (showBrowseWithExtensionButton(selectedNode))
        {


#line default
#line hidden
#nullable disable
            __builder.AddContent(310, "            ");
            __builder.OpenElement(311, "select");
            __builder.AddAttribute(312, "value", global::Microsoft.AspNetCore.Components.BindConverter.FormatValue(
#nullable restore
#line 360 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                           SelectedExtensionKey

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(313, "onchange", global::Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => SelectedExtensionKey = __value, SelectedExtensionKey));
            __builder.SetUpdatesAttributeName("value");
            __builder.AddMarkupContent(314, "\n                ");
            __builder.OpenElement(315, "option");
            __builder.AddAttribute(316, "enabled", "false");
            __builder.AddAttribute(317, "selected", true);
            __builder.AddContent(318, "default");
            __builder.CloseElement();
            __builder.AddMarkupContent(319, "\n");
#nullable restore
#line 362 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                 foreach (string extension in AASService.fileExtensions.Keys)
                {

#line default
#line hidden
#nullable disable
            __builder.AddContent(320, "                    ");
            __builder.OpenElement(321, "option");
            __builder.AddAttribute(322, "value", 
#nullable restore
#line 364 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                    extension

#line default
#line hidden
#nullable disable
            );
#nullable restore
#line 364 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(323, extension);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(324, "\n");
#nullable restore
#line 365 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                }

#line default
#line hidden
#nullable disable
            __builder.AddContent(325, "            ");
            __builder.CloseElement();
            __builder.AddMarkupContent(326, "\n            ");
            __builder.OpenElement(327, "button");
            __builder.AddAttribute(328, "style", "margin-bottom: 5px");
            __builder.AddAttribute(329, "onclick", global::Microsoft.AspNetCore.Components.EventCallback.Factory.Create<global::Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 367 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                         browseWithExtension

#line default
#line hidden
#nullable disable
            ));
            __builder.AddContent(330, "(Re)Browse With Extension");
            __builder.CloseElement();
            __builder.AddMarkupContent(331, "<br>\n");
#nullable restore
#line 425 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
             
        }
            

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(332, "\n");
#nullable restore
#line 429 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
              
                string detailsImage = createDetailsImage(selectedNode);
                if (detailsImage != "")
                {

#line default
#line hidden
#nullable disable
            __builder.AddMarkupContent(333, "                    <br>\n                    ");
            __builder.OpenElement(334, "div");
            __builder.AddMarkupContent(335, "\n                        ");
            __builder.OpenElement(336, "img");
            __builder.AddAttribute(337, "src", "data:image;base64," + (
#nullable restore
#line 435 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                                                    detailsImage

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(338, "style", "max-width: 50%");
            __builder.AddAttribute(339, "alt", "Details Image");
            __builder.CloseElement();
            __builder.AddMarkupContent(340, "\n                    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(341, "\n");
#nullable restore
#line 437 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                }

                if (selectedNode != null && (selectedNode.Tag is AdminShellNS.AdminShellV20.BasicEvent be))
                {
                    if (be.observed != null)
                    {
                        string okey = be.observed.GetAsExactlyOneKey().ToString();

#line default
#line hidden
#nullable disable
            __builder.AddContent(342, "                        ");
            __builder.AddMarkupContent(343, "<span style=\"color:white;background-color:blue;\">Observed</span>\n                        ");
            __builder.OpenElement(344, "span");
#nullable restore
#line 445 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(345, " " + okey);

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(346, "<br>\n");
#nullable restore
#line 446 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        var refsme = Program.env[0].AasEnv.FindReferableByReference(be.observed);
                        if (refsme != null)
                        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(347, "                            ");
            __builder.OpenElement(348, "span");
            __builder.AddAttribute(349, "style", "color:lightgray;");
            __builder.AddContent(350, "UPDATE ");
#nullable restore
#line 449 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(351, refsme.TimeStamp.ToString("yy-MM-dd HH:mm:ss.fff"));

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(352, "<br>\n                            ");
            __builder.OpenElement(353, "span");
            __builder.AddAttribute(354, "style", "color:lightgray;");
            __builder.AddContent(355, "CREATE ");
#nullable restore
#line 450 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
__builder.AddContent(356, refsme.TimeStampCreate.ToString("yy-MM-dd HH:mm:ss.fff"));

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(357, "<br>\n");
#nullable restore
#line 451 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        }
                        else
                        {

#line default
#line hidden
#nullable disable
            __builder.AddContent(358, "                            ");
            __builder.AddMarkupContent(359, "<span>Referenced element does not exist!</span><br>\n");
#nullable restore
#line 455 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                        }
                    }
                }
            

#line default
#line hidden
#nullable disable
            __builder.AddContent(360, "        ");
            __builder.CloseElement();
            __builder.AddMarkupContent(361, "\n    ");
            __builder.CloseElement();
            __builder.AddMarkupContent(362, "\n");
            __builder.CloseElement();
            __builder.AddMarkupContent(363, "\n\n\n\n\n");
            __builder.AddMarkupContent(364, @"<style>
.modal-fullscreen {
  padding: 0 !important;
}
.modal-fullscreen .modal-dialog {
  width: 100%;
  max-width: none;
  height: 100%;
  margin: 0;
}
.modal-fullscreen .modal-content {
  height: 100%;
  border: 0;
  border-radius: 0;
}
.modal-fullscreen .modal-body {
  overflow-y: auto;
}
</style>");
        }
        #pragma warning restore 1998
#nullable restore
#line 102 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                           
                        private void setTimeStamp()
                        {
                            (selectedNode.Tag as Referable).setTimeStamp(DateTime.UtcNow);
                        }
                    

#line default
#line hidden
#nullable disable
#nullable restore
#line 142 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                               
                            private void resetSubmodelToPublish()
                            {
                                Program.submodelsToPublish.Remove(selectedNode.Tag);
                            }
                            private void setSubmodelToPublish()
                            {
                                bool toSubscribe = Program.submodelsToSubscribe.Contains(selectedNode.Tag);
                                if (!toSubscribe)
                                    Program.submodelsToPublish.Add(selectedNode.Tag);
                            }
                            private void resetSubmodelToSubscribe()
                            {
                                Program.submodelsToSubscribe.Remove(selectedNode.Tag);
                            }
                            private void setSubmodelToSubscribe()
                            {
                                bool toPublish = Program.submodelsToPublish.Contains(selectedNode.Tag);
                                if (!toPublish)
                                    Program.submodelsToSubscribe.Add(selectedNode.Tag);
                            }
                            private void save()
                            {
                                string fname = Path.GetFileName(Program.envFileName[selectedNode.envIndex]);
                                Program.env[selectedNode.envIndex].SaveAs("./temp/" + fname);
                                System.IO.File.Copy("./temp/" + fname, Path.Combine(Program.DataPath, fname), true);
                            }
                        

#line default
#line hidden
#nullable disable
#nullable restore
#line 176 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                            private string CurrentValue { get; set; } 

#line default
#line hidden
#nullable disable
#nullable restore
#line 213 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                               
                            private void runCreateQRCodeImage()
                            {
                                createQRCodeImage(selectedNode);
                            }
                        

#line default
#line hidden
#nullable disable
#nullable restore
#line 369 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
                   
                private string SelectedExtensionKey { get; set; }

                private bool showBrowseWithExtensionButton(Item item)
                {
                    if (item == null)
                    {
                        return false;
                    }

                    if (item.Tag is AdminShellNS.AdminShellV20.File) {
                        return true;
                    }

                    var extensionItem = item as ExtensionItem;
                    if (extensionItem == null || extensionItem.extension == null)
                    {
                        return false;
                    }

                    return extensionItem.extension.RepresentsFileToBeBrowsed(item);

                }

                private void browseWithExtension()
                {
                    IAASServiceExtension extension = null;
                    if (SelectedExtensionKey != null && SelectedExtensionKey != "default")
                    {
                        AASService.fileExtensions.TryGetValue(SelectedExtensionKey, out extension);
                    }

                    if (selectedNode.Tag is AdminShellNS.AdminShellV20.File)
                    {
                        SubmodelService.CreateFileItems(selectedNode, (selectedNode.Tag as AdminShellNS.AdminShellV20.File), TreePage.getRestURL(selectedNode), extension);
                    } else if (selectedNode is ExtensionItem)
                    {
                        var parentExtension = (selectedNode as ExtensionItem).extension;
                        
                        var downloadLink = parentExtension.GetDownloadLink(selectedNode);
                        if (downloadLink == null)
                        {
                            return;
                        }

                        HttpWebRequest fileReq = HttpWebRequest.Create(downloadLink) as HttpWebRequest;
                        try
                        {
                            HttpWebResponse fileResp = fileReq.GetResponse() as HttpWebResponse;
                            Stream fileStream = fileResp.GetResponseStream();

                            SubmodelService.CreateFileItems(selectedNode, fileStream, TreePage.getRestURL(selectedNode), extension);
                        }
                        catch { }
                    }
                }
            

#line default
#line hidden
#nullable disable
#nullable restore
#line 474 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\TreePage.razor"
       
    System.Diagnostics.Stopwatch watchTimeToProcessImage = new System.Diagnostics.Stopwatch();
    DateTime timeStampPlot = new DateTime();
    PlotFilter plotFilter = new PlotFilter();
    SubmodelElementCollection collectionPlot = null;
    bool showImageModal = false;
    ListOfTimeSeriesData _timeSeriesData = new ListOfTimeSeriesData();
    int plotFilterTsdOffset = 0;

    private class PlotFilter
    {
        public DateTime fromDate { get; set; }
        public DateTime fromTime { get; set; }
        public DateTime toDate { get; set; }
        public DateTime toTime { get; set; }
        public DateTime combinedFromDate { get; set; }
        public DateTime combinedToDate { get; set; }

        public PlotFilter()
        {
            this.SetInitialFilterState();
        }

        public void SetInitialFilterState()
        {
            ResetTimeOfDates();
            var initialFromDate = DateTime.Now.AddYears(-3);
            var initialToDate = DateTime.Now.AddYears(3);
            fromDate = initialFromDate;
            toDate = initialToDate;
            combinedFromDate = initialFromDate;
            combinedToDate = initialToDate;
        }

        public void SetFilterStateDay(int offset)
        {
            ResetTimeOfDates();
            DateTime day = DateTime.Today.AddDays(offset);
            TimeSpan midnight = new System.TimeSpan(0, 23, 59, 59);
            DateTime endOfDay = day.Add(midnight);

            fromDate = day;
            fromTime = day;
            toDate = endOfDay;
            toTime = endOfDay;
            combinedFromDate = day;
            combinedToDate = endOfDay;
        }

        public void ResetTimeOfDates()
        {
            // Reset to 0 AM
            fromDate = new DateTime(fromDate.Year, fromDate.Month, fromDate.Day, 0, 0, 0);
            toDate = new DateTime(toDate.Year, toDate.Month, toDate.Day, 0, 0, 0);
        }

        public void UpdateFilter(ListOfTimeSeriesData tsd, int sessionNumber)
        {
            ResetTimeOfDates();
            TimeSpan fromTimeSpan = fromTime.TimeOfDay;
            TimeSpan toTimeSpan = toTime.TimeOfDay;
            combinedFromDate = fromDate.Add(fromTimeSpan);
            combinedToDate = toDate.Add(toTimeSpan);
            tsd?.RenderTimeSeries(defPlotHeight: 200, "en", sessionNumber, combinedFromDate, combinedToDate);
        }
    }

    async Task DownloadFile()
    {
        this.StateHasChanged();
        var f = selectedNode.Tag as AdminShellNS.AdminShellV20.File;
        var fileName = System.IO.Path.GetFileName(f.value);
        if (fileName != "")
        {
            try
            {
                byte[] data;
                using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
                {
                    Program.env[selectedNode.envIndex].GetLocalStreamFromPackage(f.value).CopyTo(ms);
                    data = ms.ToArray();
                }
                //
                await SaveAs(js, fileName, data);
            }
            catch
            {
            }

        }
    }
    async Task SaveAs(IJSRuntime js, string filename, byte[] data)
    // async Task SaveAs(IJSRuntime js, string filename, string data)
    {
        ; await js.InvokeAsync<object>(
     "saveAsFile",
     filename,
     data
     );
        /*
        await js.InvokeAsync<object>(
    "saveAsFile",
    filename,
        Convert.ToBase64String(data)
        );
        */
        /*
        await js.InvokeAsync<object>(
            "download",
            data,
            filename,
            "application/pdf"
    );
    */
    }

    public class Item
    {
        public string Text { get; set; }
        public IEnumerable<Item> Childs { get; set; }
        public object parent { get; set; }
        // public List<Item> Childs { get; set; }
        public string Type { get; set; }
        public object Tag { get; set; }
        public int envIndex { get; set; }
    }

    // An Item that was created by an extension. Rendering the item is realized by the extension as well.
    public class ExtensionItem : Item
    {
        public IAASServiceExtension extension { get; set; }
        public string restBaseURL { get; set; }
    }

    List<Item> Items = null;

    IList<Item> ExpandedNodes = new List<Item>();
    Item selectedNode;
    Item SelectedNode
    {
        get { return selectedNode; }
        set
        {
            selectedNode = value;
            // OnSelectNode(selectedNode);
        }
    }

    static ulong dataVersion = 0;

    public static void checkDataVersion()
    {
        if (Program.getDataVersion() != dataVersion)
        {
            dataVersion = Program.getDataVersion();
            // TreePage.StateHasChanged();
        }
    }

    static int hack = 0;

    System.Threading.Timer refresh = null;

    protected override void OnInitialized()
    {
        // OnInitialized() allways called twice
        // if (hack++ == 0)
        //    return;

        // hack = 0;
        // SubmodelService.buildTree();
        // Items = SubmodelService.GetTree(selectedNode, ExpandedNodes);
        // newDataMode = 1;
        // StateHasChanged();

        //ExpandedNodes.Add(Items.Skip(1).First());
        //ExpandedNodes.Add(Items.Skip(1).Take(1).First().Childs.Skip(1).First());

        SubmodelService.NewDataAvailable += NewData;
        Program.signalNewData(1);

        /*
        refresh = new System.Threading.Timer(new System.Threading.TimerCallback(_ =>
            {
            // Note that the following line is necessary because otherwise
            // Blazor would not recognize the state change and not refresh the UI
            // InvokeAsync(() => this.StateHasChanged());
        }), null, 5000, 5000);
    */
    }

    public void Dispose()
    {
        SubmodelService.NewDataAvailable -= NewData;
    }

    int newDataMode = 0;

    void NewData(object source, EventArgs args)
    {
        if (Program.isLoading)
            return;

        // update = true;
        if (newDataMode == 0)
        {
            if (args is Program.NewDataAvailableArgs newArgs)
            {
                newDataMode = newArgs.signalNewDataMode;
                // Items = SubmodelService.GetTree(selectedNode, ExpandedNodes);
                InvokeAsync(() => this.StateHasChanged());
            }
        }
        // newDataMode = Program.getSignalNewDataMode();
        // Items = SubmodelService.GetTree(selectedNode, ExpandedNodes);

        // InvokeAsync(() => this.StateHasChanged());
        // this.StateHasChanged();
    }

    bool update = true;

    string updateVisibleTree(List<Item> viewItems, Item selectedNode)
    {
        if (update)
        {
            switch (newDataMode)
            {
                // 0 == same tree, only values changed
                case 0:
                    break;
                // 1 == same tree, structure may change
                // 2 == build new tree, keep open nodes
                case 1:
                case 2:
                    bool isSelected = selectedNode != null;
                    bool isExpanded = ExpandedNodes.Count != 0;
                    List<string>[] expandedNodesPath = new List<string>[ExpandedNodes.Count + 1];
                    List<string> selectedNodePath = getPath(selectedNode);
                    if (isExpanded)
                    {
                        for (int j = 0; j < ExpandedNodes.Count; j++)
                        {
                            expandedNodesPath[j] = getPath(ExpandedNodes[j]);
                        }
                    }
                    SubmodelService.buildTree();
                    Items = SubmodelService.GetTree(selectedNode, ExpandedNodes);
                    ExpandedNodes.Clear();
                    selectedNode = null;
                    if (isSelected)
                    {
                        selectedNode = findPath(selectedNodePath);
                    }
                    if (isExpanded)
                    {
                        foreach (var path in expandedNodesPath)
                        {
                            Item p = findPath(path);
                            if (p != null)
                                ExpandedNodes.Add(p);
                        }
                    }
                    newDataMode = 0;
                    break;
                // 3 == build new tree, all nodes closed
                case 3:
                    SubmodelService.buildTree();
                    Items = SubmodelService.GetTree(selectedNode, ExpandedNodes);
                    ExpandedNodes.Clear();
                    selectedNode = null;
                    newDataMode = 0;
                    break;
            }
            SelectedNode = selectedNode;
            // update = false;
            // updateNode(viewItems[0]);
        }
        return "";
    }

    public static List<string> getPath(Item i)
    {
        if (i == null)
            return null;

        List<string> upPath = new List<string>();
        upPath.Add(i.Text);
        while (i.parent != null)
        {
            i = (Item)i.parent;
            upPath.Add(i.Text);
        }
        List<string> downPath = new List<string>();
        int j = upPath.Count - 1;
        while (j >= 0)
        {
            downPath.Add(upPath[j--]);
        }
        return downPath;
    }

    Item findPath(List<string> path)
    {
        if (path != null && path.Count > 0)
        {
            Item found = null;
            int k = 0;
            while (k < Items.Count)
            {
                Item i = Items[k];
                if (i.Text != path[0])
                {
                    k++;
                    continue;
                }
                int j = 0;
                found = i;
                while (++j < path.Count)
                {
                    if (i.Childs != null)
                    {
                        found = null;
                        foreach (var c in i.Childs)
                        {
                            if (c.Text == path[j])
                            {
                                found = c;
                                break;
                            }
                        }
                    }
                    if (found == null)
                    {
                        return null;
                    }
                    i = found;
                }
                if (found != null)
                    return found;
            }
        }
        return null;
    }

    void updateNode(Item i)
    {
        var clist = i.Childs as List<Item>;
        List<string> listIdshort = new List<string>();
        bool done = false;
        if (!done && i.Tag is Submodel sm)
        {
            foreach (var smew1 in sm.submodelElements)
            {
                listIdshort.Add(smew1.submodelElement.idShort);
            }
            done = true;
        }
        if (!done && i.Tag is SubmodelElementCollection smec)
        {
            foreach (var smew2 in smec.value)
            {
                listIdshort.Add(smew2.submodelElement.idShort);
            }
            done = true;
        }
        if (!done && i.Tag is SubmodelElement sme)
        {
            listIdshort.Add(sme.idShort);
            done = true;
        }
        // check if child name exists in data children idshorts, if not delete
        if (done)
        {
            List<Item> toDelete = new List<Item>();
            if (clist != null)
            {
                foreach (var c in clist)
                {
                    if (!listIdshort.Contains(c.Text))
                    {
                        toDelete.Add(c);
                    }
                }
            }
            else
            {
                if (!listIdshort.Contains(i.Text))
                {
                    toDelete.Add(i);
                }
            }
            foreach (var c in toDelete)
            {
                var parent = c.parent as Item;
                if (parent != null)
                {
                    (parent.Childs as List<Item>).Remove(c);
                }
            }
        }
        // check if data children idshorts exist in child names, if not insert
        if (clist != null)
        {
            foreach (var c in clist)
            {
                updateNode(c);
            }
        }
    }

    string createDetailsImage(Item item)
    {
        // System.IO.File.Delete("wwwroot/detailsImage.jpg");

        if (item == null)
        {
            return "";
        }

        object o = item.Tag;

        if (o is AdministrationShell)
        {
            var aas = o as AdministrationShell;
            lock (Program.changeAasxFile)
            {
                try
                {
                    using (System.IO.Stream s = Program.env[item.envIndex].GetLocalThumbnailStream())
                    {
                        if (s != null)
                        {
                            using (var m = new System.IO.MemoryStream())
                            {
                                s.CopyTo(m);
                                return System.Convert.ToBase64String(m.ToArray());
                            }
                        }

                    }
                }
                catch { }
            }
        }

        if (o is AdminShellNS.AdminShellV20.File)
        {
            var f = o as AdminShellNS.AdminShellV20.File;

            // Test for /aasx/
            if (f.value != "")
            {
                string[] split = f.value.Split(new Char[] { '/' });
                if (split.Length == 2 || split.Length > 1 && split[1].ToLower() == "aasx")
                {
                    split = f.value.Split(new Char[] { '.' });
                    switch (split.Last().ToLower())
                    {
                        case "jpg":
                        case "bmp":
                        case "png":
                            try
                            {
                                using (System.IO.Stream s = Program.env[item.envIndex].GetLocalStreamFromPackage(f.value))
                                {
                                    if (s != null)
                                    {
                                        using (var m = new System.IO.MemoryStream())
                                        {
                                            s.CopyTo(m);
                                            return System.Convert.ToBase64String(m.ToArray());
                                        }
                                    }
                                }
                            }
                            catch { }
                            break;
                    }
                }
            }
        }

        return "";
    }

    string getQRCodeLink(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string prefix = "http://";
        string hostPort = Program.hostPort;

        string[] split = Program.hostPort.Split(':');
        if (split[0].ToLower() == "admin-shell-io.com")
        {
            // prefix = "https://";
            // hostPort = split[0] + ":" + (Convert.ToInt32(split[1]) + 1);
        }

        object o = item.Tag;

        if (o is AdministrationShell)
        {
            var aas = o as AdministrationShell;
            var asset = Program.env[item.envIndex].AasEnv.FindAsset(aas.assetRef);
            if (asset != null)
            {
                // string url = WebUtility.UrlEncode(asset.identification.id);
                string url = asset.identification.id;
                // string link = prefix + hostPort + "/server/getaasxbyassetid/" + url;
                // string link = Program.externalRest + "/server/getaasxbyassetid/" + url;
                string link = url;

                return link;
            }
        }

        return "";
    }

    string getQRCodeImage(Item item)
    {
        if (item == null)
        {
            return "";
        }

        object o = item.Tag;

        if (o is AdministrationShell)
        {
            string image = Program.generatedQrCodes[item.Tag];

            if (image != null)
                return image;
        }

        return "";
    }

    void createQRCodeImage(Item item)
    {
        // System.IO.File.Delete("wwwroot/detailsImage.jpg");

        if (item == null)
        {
            return;
        }

        string prefix = "http://";
        string hostPort = Program.hostPort;

        string[] split = Program.hostPort.Split(':');
        if (split[0].ToLower() == "admin-shell-io.com")
        {
            // prefix = "https://";
            // hostPort = split[0] + ":" + (Convert.ToInt32(split[1]) + 1);
        }

        object o = item.Tag;

        if (o is AdministrationShell)
        {
            if (Program.generatedQrCodes.ContainsKey(item.Tag))
            {
                Program.generatedQrCodes.Remove(item.Tag);
                return;
            }

            var aas = o as AdministrationShell;
            var asset = Program.env[item.envIndex].AasEnv.FindAsset(aas.assetRef);
            if (asset != null)
            {
                // string url = WebUtility.UrlEncode(asset.identification.id);
                string url = asset.identification.id;
                // string link = prefix + hostPort + "/server/getaasxbyassetid/" + url;
                // string link = Program.externalRest + "/server/getaasxbyassetid/" + url;
                string link = url;

                QRCodeGenerator qrGenerator = new QRCodeGenerator();
                QRCodeData qrCodeData = qrGenerator.CreateQrCode(link, QRCodeGenerator.ECCLevel.Q);
                QRCode qrCode = new QRCode(qrCodeData);
                Bitmap qrCodeImage = qrCode.GetGraphic(20);
                using (System.IO.MemoryStream memory = new System.IO.MemoryStream())
                {
                    qrCodeImage.Save(memory, System.Drawing.Imaging.ImageFormat.Bmp);
                    string base64 = Convert.ToBase64String(memory.ToArray());

                    Program.generatedQrCodes.Add(item.Tag, base64);

                }
                return;
            }
        }

        return;
    }

    bool hasDownloadFile(Item item)
    {
        return false;

        if (item == null)
        {
            return false;
        }

        object o = item.Tag;

        if (o is AdminShellNS.AdminShellV20.File)
        {

            var f = o as AdminShellNS.AdminShellV20.File;

            // Test for /aasx/
            string[] split = f.value.Split(new Char[] { '/' });
            if (split.Length == 2 || split[1].ToLower() == "aasx")
            {
                return true;
            }
        }

        return false;
    }

    string getLink(Item item, out bool external)
    {
        external = false;

        if (item == null)
        {
            return "";
        }

        string prefix = "http://";
        string hostPort = Program.hostPort;

        string[] split = Program.hostPort.Split(':');
        if (split[0].ToLower() == "admin-shell-io.com")
        {
            prefix = "https://";
            hostPort = split[0] + ":" + (Convert.ToInt32(split[1]) + 1);
        }

        object o = item.Tag;

        if (o == null && Program.envSymbols[item.envIndex] == "L")
        {
            // return prefix + hostPort + "/server/getaasx/" + Convert.ToString(selectedNode.envIndex);
            return Program.externalRest + "/server/getaasx/" + Convert.ToString(selectedNode.envIndex);
        }

        if (o is AdministrationShell)
        {
            // return prefix + hostPort + "/server/getaasx/" + Convert.ToString(selectedNode.envIndex);
            return Program.externalRest + "/server/getaasx/" + Convert.ToString(selectedNode.envIndex);
        }

        if (o is AdminShellNS.AdminShellV20.File || o is Property)
        {
            string value = "";

            if (o is AdminShellNS.AdminShellV20.File)
            {
                value = (o as AdminShellNS.AdminShellV20.File).value;
            }
            if (o is Property)
            {
                value = (o as Property).value;
            }

            split = value.Split(new Char[] { ':' });
            if (split[0].ToLower() == "http" || split[0].ToLower() == "https")
            {
                external = true;
                return value;
            }

            // Test for /aasx/
            split = value.Split(new Char[] { '/' });
            if (split.Length > 1)
            {
                if (split.Length == 2 || split[1].ToLower() == "aasx")
                {
                    // return prefix + hostPort + "/server/getfile/" + item.envIndex.ToString() + value;
                    return Program.externalRest + "/server/getfile/" + item.envIndex.ToString() + value;
                }
            }
        }

        return "";
    }

    string getSymbols(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "";
        object o = item.Tag;

        if (o is AdministrationShell)
        {
            string symbols = Program.envSymbols[item.envIndex];

            if (symbols != null)
            {
                string[] s = symbols.Split(';');

                for (int i = 0; i < s.Length; i++)
                {
                    switch (s[i])
                    {
                        case "L":
                            ret += "ENCRYPTED ";
                            break;
                        case "S":
                            ret += "SIGNED ";
                            break;
                        case "V":
                            ret += "VALIDATED ";
                            break;
                    }
                }
            }
        }

        return ret;
    }

    string ViewNodeType(Item item)
    {
        if (item == null)
        {
            return "";
        }

        if (item is ExtensionItem)
        {
            return (item as ExtensionItem).extension?.ViewNodeType(item);
        }

        string ret = "";

        if (item.Type != null)
        {
            ret = item.Type + " ";
        }

        object o = item.Tag;

        /*
        if (o is Referable)
        {
        ret = (o as Referable).GetElementName();
        return (ret);
    }
    */

        if (o == null && Program.envSymbols[item.envIndex] == "L")
        {
            ret += "AASX2";
        }

        if (o is AdministrationShell)
        {
            ret += "AAS";
        }
        if (o is Submodel)
        {
            ret += "Sub";
        }
        if (o is SubmodelElement)
        {
            if (o is SubmodelElementCollection)
            {
                ret += "Coll";
            }
            if (o is Property)
            {
                ret += "Prop";
            }
        }
        if (o is Operation)
        {
            ret += "Opr";
        }
        if (o is AdminShellNS.AdminShellV20.File)
        {
            ret += "File";
        }
        if (o is Blob)
        {
            ret += "Blob";
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            ret += "Range";
        }
        if (o is MultiLanguageProperty)
        {
            ret += "Lang";
        }
        if (o is RelationshipElement)
        {
            ret += "Rel";
        }
        if (o is ReferenceElement)
        {
            ret += "Ref";
        }
        if (o is Entity)
        {
            ret += "Ent";
        }
        if (o is AdminShellNS.AdminShellV20.BasicEvent)
        {
            ret += "Evt";
        }

        return (ret);
    }

    string ViewTimeStamp(Item item)
    {
        if (item == null)
        {
            return "";
        }

        string ret = "";

        object o = item.Tag;

        if (o is Referable r)
            // ret += " (" + r.TimeStamp.Ticks + ") ";
            ret += " (" + r.TimeStamp.ToString("yy-MM-dd HH:mm:ss.fff") + ") ";

        return ret;
    }

    string ViewNodeID(Item item)
    {
        if (item == null)
        {
            return "";
        }

        if (item is ExtensionItem)
        {
            return (item as ExtensionItem).extension?.ViewNodeID(item);
        }

        string ret = "NULL";

        object o = item.Tag;

        if (o is string)
        {
            ret = item.Text;
        }

        if (o == null && Program.envSymbols[item.envIndex] == "L")
        {
            ret = item.Text;
        }

        if (o is AdministrationShell)
        {
            var aas = o as AdministrationShell;
            ret = aas.idShort;
        }
        if (o is Submodel)
        {
            var sm = o as Submodel;
            ret = "";
            if (sm.kind != null && sm.kind.IsTemplate)
                ret += "<T> ";
            ret += sm.idShort;
        }
        if (o is SubmodelElement)
        {
            var sme = o as SubmodelElement;
            ret = "";
            if (sme.kind != null && sme.kind.IsTemplate)
                ret += "<T> ";
            ret += sme.idShort;
        }
        if (o is AdminShellNS.AdminShellV20.File)
        {
            var f = o as AdminShellNS.AdminShellV20.File;
            ret = "";
            if (f.kind != null && f.kind.IsTemplate)
                ret += "<T> ";
            ret += f.idShort;
        }
        if (o is Blob)
        {
            var b = o as Blob;
            ret = "";
            if (b.kind != null && b.kind.IsTemplate)
                ret += "<T> ";
            ret += b.idShort;
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            var r = o as AdminShellNS.AdminShellV20.Range;
            ret = "";
            if (r.kind != null && r.kind.IsTemplate)
                ret += "<T> ";
            ret += r.idShort;
        }
        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            ret = "";
            if (mlp.kind != null && mlp.kind.IsTemplate)
                ret += "<T> ";
            ret += mlp.idShort;
        }
        return (ret);
    }

    string GetHtmlId(Item item)
    {
        string ret = ViewNodeID(item);
        if (item.parent != null)
        {
            ret = GetHtmlId(item.parent as Item) + "." + ret;
        }
        return (ret);
    }

    string ViewNodeInfo(Item item)
    {
        if (item == null)
        {
            return "";
        }

        if (item is ExtensionItem)
        {
            return (item as ExtensionItem).extension?.ViewNodeInfo(item);
        }

        string ret = "";

        object o = item.Tag;

        if (o is string)
        {
            ret = "<string>";
        }

        if (o is AdministrationShell)
        {
            var aas = o as AdministrationShell;
            // ret = aas.identification.ToString();
        }
        if (o is Submodel)
        {
            var sm = o as Submodel;
            // ret = sm.identification.ToString();
            if (sm.qualifiers != null && sm.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        if (o is SubmodelElementCollection)
        {
            var sme = o as SubmodelElementCollection;
            // ret = sm.identification.ToString();
            if (sme.value.Count > 0)
            {
                ret += " #" + sme.value.Count;
            }
            if (sme.qualifiers != null && sme.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        if (o is SubmodelElement)
        {
            if (o is Property)
            {
                var prop = o as Property;
                if (prop.value != "")
                {
                    string v = prop.value;
                    if (v.Length > 100)
                        v = v.Substring(0, 100) + " ..";
                    ret = " = " + v;
                }
                if (prop.qualifiers != null && prop.qualifiers.Count > 0)
                {
                    ret += " @QUALIFIERS";
                }
            }
            if (o is AdminShellNS.AdminShellV20.File)
            {
                var f = o as AdminShellNS.AdminShellV20.File;
                ret = " = " + f.value;
                if (f.qualifiers != null && f.qualifiers.Count > 0)
                {
                    ret += " @QUALIFIERS";
                }
            }
        }
        if (o is AdminShellNS.AdminShellV20.Range)
        {
            var r = o as AdminShellNS.AdminShellV20.Range;
            ret = " = " + r.min + " .. " + r.max;
            if (r.qualifiers != null && r.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            var ls = mlp.value;
            ret = " = ";
            for (int i = 0; i < ls.Count; i++)
            {
                ret += ls.langString[i].lang + " ";
                if (i == 0)
                    ret += ls.langString[i].str + " ";
            }
            if (mlp.qualifiers != null && mlp.qualifiers.Count > 0)
            {
                ret += " @QUALIFIERS";
            }
        }
        return (ret);
    }

    string ViewNodeDetails(Item item, int line, int col)
    {
        if (item == null)
        {
            return "";
        }

        if (item is ExtensionItem)
        {
            return (item as ExtensionItem).extension?.ViewNodeDetails(item, line, col);
        }

        // string ret = "NULL";
        string ret = "";

        object o = item.Tag;

        if (o == null)
        {
            return "";
        }

        if (o is string)
        {
            if (line == 0 && (col == 0 || col == 1))
                ret = o as string;
        }

        if (o is AdministrationShell)
        {
            string subjectIssuer = null;

            ret = "";
            var aas = o as AdministrationShell;

            var asset = Program.env[item.envIndex].AasEnv.FindAsset(aas.assetRef);

            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "ID";
                    if (col == 1)
                        ret = aas.identification + "";
                    if (col == 2)
                        ret = " ==> " + Base64UrlEncoder.Encode(aas.identification.id) + "";
                    break;
                case 1:
                    if (asset != null)
                    {
                        if (col == 0)
                            ret = "ASSET";
                        if (col == 1)
                            ret = asset.idShort;
                    }
                    break;
                case 2:
                    if (asset != null)
                    {
                        if (col == 0)
                            ret = "ASSETID";
                        if (col == 1)
                            ret = asset.identification + "";
                        if (col == 2)
                            ret = " ==> " + Base64UrlEncoder.Encode(asset.identification.id) + "";
                    }
                    break;
                case 3:
                    if (asset != null)
                    {
                        if (col == 0)
                            ret = "ASSETID URLENCODED";
                        if (col == 1)
                        {
                            string url = WebUtility.UrlEncode(asset.identification.id);
                            ret = url;
                        }
                    }
                    break;
                /*
                case 3:
                subjectIssuer = Program.envSubjectIssuer[item.envIndex];
                if (subjectIssuer != null)
                    {
                    string[] s = subjectIssuer.Split(';');
                        if (s.Length > 0 && s[0] != "")
                {
            ret = "SUBJECT";
            if (col == 1)
            ret = s[0];
            }
            }
            break;
            case 4:
            subjectIssuer = Program.envSubjectIssuer[item.envIndex];
                if (subjectIssuer != null)
                {
                string[] s = subjectIssuer.Split(';');
                    if (s.Length > 1 && s[1] != "")
                    {
                        ret = "ISSUER";
                if (col == 1)
            ret = s[1];
        }
        }
            break;
            */
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        if (o is Submodel)
        {
            var sm = o as Submodel;
            ret = "";
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "ID";
                    if (col == 1)
                        ret = sm.identification + "";
                    if (col == 2)
                        ret = " ==> " + Base64UrlEncoder.Encode(sm.identification.id) + "";
                    break;
                case 1:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = sm.semanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 2:
                    ret = getQualifiers(sm.qualifiers, col);
                    break;
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        if (o is Property)
        {
            var prop = o as Property;
            // ret += ", " + prop.value;
            ret = "";
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = prop.semanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    if (col == 0)
                        ret = "Value Type";
                    if (col == 1)
                        ret = prop.valueType + "";
                    break;
                case 2:
                    if (col == 0)
                        ret = "Value";
                    if (col == 1)
                        ret = prop.value + "";
                    break;
                case 3:
                    ret = getQualifiers(prop.qualifiers, col);
                    break;
                case 4:
                    if (col == 0)
                        ret = getUnit(item, prop, col);
                    break;
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        if (o is Entity)
        {
            var e = o as Entity;
            // ret += ", " + e.entityType;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = e.semanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    if (col == 0)
                        ret = "Entity Type";
                    if (col == 1)
                        ret = e.entityType + "";
                    break;
                case 2:
                    ret = "";
                    if (e.GetEntityType() == Entity.EntityTypeEnum.SelfManagedEntity)
                    {
                        if (e.assetRef != null)
                        {
                            if (col == 0)
                                ret = "Asset";
                            if (col == 1)
                            {
                                var k = e.assetRef.Keys;
                                if (k != null)
                                {
                                    ret = k.ToString();
                                }
                            }
                        }
                    }
                    break;
                case 3:
                    ret = getQualifiers(e.qualifiers, col);
                    break;
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        if (o is AdminShellNS.AdminShellV20.File)
        {
            var f = o as AdminShellNS.AdminShellV20.File;
            // ret += ", " + f.value;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = f.semanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    if (col == 0)
                        ret = "Value";
                    if (col == 1)
                        ret = f.value;
                    break;
                case 2:
                    ret = getQualifiers(f.qualifiers, col);
                    break;
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        if (o is Blob)
        {
            var b = o as Blob;
            ret = "";
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = b.semanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    if (col == 0)
                        ret = "MimeType";
                    if (col == 1)
                        ret = b.mimeType;
                    break;
                case 2:
                    if (col == 0)
                        ret = "Value";
                    if (col == 1)
                        ret = b.value;
                    break;
                case 3:
                    ret = getQualifiers(b.qualifiers, col);
                    break;
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        if (o is AdminShellNS.AdminShellV20.Range)
        {
            var r = o as AdminShellNS.AdminShellV20.Range;
            // ret = r.idShort;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.semanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    if (col == 0)
                        ret = "Min";
                    if (col == 1)
                        ret = r.min + "";
                    break;
                case 2:
                    if (col == 0)
                        ret = "Max";
                    if (col == 1)
                        ret = r.max + "";
                    break;
                case 3:
                    ret = getQualifiers(r.qualifiers, col);
                    break;
                case 4:
                    if (col == 0)
                        ret = getUnit(item, r, col);
                    break;
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        if (o is Operation)
        {
            var op = o as Operation;
            // ret = op.idShort;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = op.semanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    if (col == 0)
                        ret = "CountInputs";
                    if (col == 1)
                    {
                        ret = "0";
                        if (op.inputVariable != null)
                        {
                            ret = op.inputVariable.Count + "";
                        }
                    }
                    break;
                case 2:
                    if (col == 0)
                        ret = "CountOutputs";
                    if (col == 1)
                    {
                        ret = "0";
                        if (op.outputVariable != null)
                        {
                            ret = op.outputVariable.Count + "";
                        }
                    }
                    break;
                case 3:
                    ret = getQualifiers(op.qualifiers, col);
                    break;
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        if (o is RelationshipElement)
        {
            var r = o as RelationshipElement;
            // ret = r.idShort;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.semanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    if (col == 0)
                        ret = "First";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.first;
                        if (k != null)
                        {
                            ret = k.Keys.ToString();
                        }
                    }
                    break;
                case 2:
                    if (col == 0)
                        ret = "Second";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.second;
                        if (k != null)
                        {
                            ret = k.Keys.ToString();
                        }
                    }
                    break;
                case 3:
                    ret = getQualifiers(r.qualifiers, col);
                    break;
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        if (o is ReferenceElement)
        {
            var r = o as ReferenceElement;
            // ret = r.idShort;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = r.semanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    if (col == 0)
                        ret = "Value";
                    if (col == 1)
                    {
                        ret = "NULL";
                        if (!(r.value == null || r.value.IsEmpty))
                        {
                            var k = r.value.Keys;
                            if (k != null)
                            {
                                ret = k.ToString();
                            }
                        }
                    }
                    break;
                case 2:
                    ret = getQualifiers(r.qualifiers, col);
                    break;
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        if (o is MultiLanguageProperty)
        {
            var mlp = o as MultiLanguageProperty;
            var ls = mlp.value;
            for (int i = 0; i < ls.Count; i++)
            {
                ret += ls.langString[i].lang + " ";
            }
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = mlp.semanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                case 2:
                case 3:
                case 4:
                    ret = "";
                    if (ls.Count > line - 1)
                    {
                        if (col == 0)
                            ret = ls.langString[line - 1].lang;
                        if (col == 1)
                            ret = ls.langString[line - 1].str + "";
                    }
                    break;
                case 5:
                    ret = getQualifiers(mlp.qualifiers, col);
                    break;
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        if (o is SubmodelElement)
        {
            var sme = o as SubmodelElement;
            // ret = sme.idShort + ", " + sme.semanticId;
            switch (line)
            {
                case 0:
                    if (col == 0)
                        ret = "Semantic ID";
                    if (col == 1)
                    {
                        ret = "NULL";
                        var k = sme.semanticId?.GetAsExactlyOneKey();
                        if (k != null)
                        {
                            ret = k.ToString();
                        }
                    }
                    break;
                case 1:
                    ret = getQualifiers(sme.qualifiers, col);
                    break;
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    ret = "";
                    break;
            }
            return ret;
        }

        return (ret);
    }

    static string getQualifiers(QualifierCollection q, int col)
    {
        string ret = "";

        if (q != null && q.Count > 0)
        {
            if (col == 0)
                ret = "Qualifiers";
            if (col == 1)
            {
                ret = "";
                for (int i = 0; i < q.Count; i++)
                {
                    if (i != 0)
                        ret += ", ";
                    if (q[i].type != null && q[i].type != "")
                    {
                        ret += q[i].type + " ";
                    }
                    if (q[i].value != null && q[i].value != "")
                    {
                        ret += "= " + q[i].value;
                    }
                }
            }
        }
        return ret;
    }

    public string getUnit(Item item, SubmodelElement se, int col)
    {
        string ret = "";
        if (se.semanticId == null || se.semanticId.Keys == null)
        {
            return ret;
        }
        var cd = Program.env[item.envIndex].AasEnv.FindConceptDescription(se.semanticId.Keys);
        if (cd != null)
        {
            var iec = cd.GetIEC61360();
            if (iec != null)
            {
                ret = "Unit";
                if (col == 1)
                {
                    ret = iec.unit;
                    if (iec.unitId != null && iec.unitId.keys != null && iec.unitId.keys.Count > 0)
                        ret += " (UnitId = " + iec.unitId.keys[0].ToString() + ")";
                }
            }
        }
        return ret;
    }

    public static string getRestURL(Item item)
    {
        if (item is ExtensionItem && (item as ExtensionItem).extension != null)
        {
            return (item as ExtensionItem).extension.GetRestURL(item);
        }

        var endpoint = Program.externalRest;
        var path = getPath(item);
        string restURL = endpoint;

        if (path.Count > 0)
        {
            // first path element should represent an AAS
            restURL = restURL + "/aas/" + path[0];
        }
        if (path.Count > 1)
        {
            // second path element should represent a submodel
            restURL = restURL + "/submodels/" + path[1];
        }

        if (path.Count > 2)
        {
            // the rest of the elements should represent submodel elements
            restURL = restURL + "/elements/" + string.Join("/", path.Skip(2).ToList());
        }

        return restURL;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private BlazorSessionService bi { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AASService SubmodelService { get; set; }
    }
}
namespace __Blazor.AasxServerBlazor.Pages.TreePage
{
    #line hidden
    internal static class TypeInference
    {
        public static void CreateTree_0<TNode>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.Collections.Generic.IEnumerable<TNode> __arg0, int __seq1, global::System.Func<TNode, global::System.Collections.Generic.IEnumerable<TNode>> __arg1, int __seq2, global::System.Func<TNode, global::System.Boolean> __arg2, int __seq3, global::System.Func<global::AasxServerBlazor.Pages.TreePage.Item, global::System.String> __arg3, int __seq4, TNode __arg4, int __seq5, global::Microsoft.AspNetCore.Components.EventCallback<TNode> __arg5, int __seq6, global::System.Collections.Generic.IList<TNode> __arg6, int __seq7, global::Microsoft.AspNetCore.Components.EventCallback<global::System.Collections.Generic.IList<TNode>> __arg7, int __seq8, global::Microsoft.AspNetCore.Components.RenderFragment<TNode> __arg8)
        {
        __builder.OpenComponent<global::AasxServerBlazor.Pages.Tree<TNode>>(seq);
        __builder.AddAttribute(__seq0, "Nodes", (object)__arg0);
        __builder.AddAttribute(__seq1, "ChildSelector", (object)__arg1);
        __builder.AddAttribute(__seq2, "HasChildNodes", (object)__arg2);
        __builder.AddAttribute(__seq3, "HtmlId", (object)__arg3);
        __builder.AddAttribute(__seq4, "SelectedNode", (object)__arg4);
        __builder.AddAttribute(__seq5, "SelectedNodeChanged", (object)__arg5);
        __builder.AddAttribute(__seq6, "ExpandedNodes", (object)__arg6);
        __builder.AddAttribute(__seq7, "ExpandedNodesChanged", (object)__arg7);
        __builder.AddAttribute(__seq8, "TitleTemplate", (object)__arg8);
        __builder.CloseComponent();
        }
        public static void CreateInputDate_1<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.Object __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg2, int __seq3, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg3)
        {
        __builder.OpenComponent<global::Microsoft.AspNetCore.Components.Forms.InputDate<TValue>>(seq);
        __builder.AddAttribute(__seq0, "id", (object)__arg0);
        __builder.AddAttribute(__seq1, "Value", (object)__arg1);
        __builder.AddAttribute(__seq2, "ValueChanged", (object)__arg2);
        __builder.AddAttribute(__seq3, "ValueExpression", (object)__arg3);
        __builder.CloseComponent();
        }
        public static void CreateInputDate_2<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, global::System.Object __arg0, int __seq1, TValue __arg1, int __seq2, global::Microsoft.AspNetCore.Components.EventCallback<TValue> __arg2, int __seq3, global::System.Linq.Expressions.Expression<global::System.Func<TValue>> __arg3)
        {
        __builder.OpenComponent<global::Microsoft.AspNetCore.Components.Forms.InputDate<TValue>>(seq);
        __builder.AddAttribute(__seq0, "id", (object)__arg0);
        __builder.AddAttribute(__seq1, "Value", (object)__arg1);
        __builder.AddAttribute(__seq2, "ValueChanged", (object)__arg2);
        __builder.AddAttribute(__seq3, "ValueExpression", (object)__arg3);
        __builder.CloseComponent();
        }
    }
}
#pragma warning restore 1591

#pragma checksum "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\_Host.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "2ff46c2e23b948e819f65c81a1d99327fd47bd7030d1559a9f9c02cf3dce80e7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AasxServerBlazor.Pages.Pages__Host), @"mvc.1.0.razor-page", @"/Pages/_Host.cshtml")]
namespace AasxServerBlazor.Pages
{
    #line hidden
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemMetadataAttribute("RouteTemplate", "/")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"2ff46c2e23b948e819f65c81a1d99327fd47bd7030d1559a9f9c02cf3dce80e7", @"/Pages/_Host.cshtml")]
    #nullable restore
    public class Pages__Host : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\n<!DOCTYPE html>\n<html lang=\"en\">\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2ff46c2e23b948e819f65c81a1d99327fd47bd7030d1559a9f9c02cf3dce80e73487", async() => {
                WriteLiteral("\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>AasxServerBlazor</title>\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("base", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "2ff46c2e23b948e819f65c81a1d99327fd47bd7030d1559a9f9c02cf3dce80e73922", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <link rel=""stylesheet"" href=""css/bootstrap/bootstrap.min.css"" />
    <link rel=""stylesheet"" href=""css/site.css"" />
    <!--
    <link rel=""stylesheet"" href=""https://use.fontawesome.com/releases/v5.8.1/css/all.css"" integrity=""sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf"" crossorigin=""anonymous"">
    -->
    <link rel=""stylesheet"" href=""css/all.css"" />
    <link rel=""stylesheet"" href=""css/treeStyles.css"" />
");
#nullable restore
#line 19 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\_Host.cshtml"
      
        if (System.IO.File.Exists("TAILWIND.DAT"))
        {

#line default
#line hidden
#nullable disable
                WriteLiteral("            <script src=\"https://cdn.tailwindcss.com\"></script>\n");
#nullable restore
#line 23 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\_Host.cshtml"
        }
    

#line default
#line hidden
#nullable disable
                WriteLiteral(@"
    <script type=""text/javascript"">
        var interval = setInterval(cyclic, 1000);
        var counter = 0;
        function cyclic() {
            counter++;
        }
        function saveAsFile(filename, bytesBase64) {
            var len = bytesBase64.length;
            var link = document.createElement('a');
            link.download = filename;
            link.href = ""data:application/pdf;base64,"" + bytesBase64;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        function text_klick() {
            var playername = document.getElementById(""tb_playername"").value;
            location.href = 'http://localhost/RA/kick(Get_u).php?u=' + playername;
        }
    </script>
    <script>
        //download.js v4.2, by dandavis; 2008-2016. [CCBY2] see http://danml.com/download.html for tests/usage
        // v1 landed a FF+Chrome compat way of downloading strings to local un-named files, upgraded to use a hidden frame and opt");
                WriteLiteral(@"ional mime
        // v2 added named files via a[download], msSaveBlob, IE (10+) support, and window.URL support for larger+faster saves than dataURLs
        // v3 added dataURL and Blob Input, bind-toggle arity, and legacy dataURL fallback was improved with force-download mime and base64 support. 3.1 improved safari handling.
        // v4 adds AMD/UMD, commonJS, and plain browser support
        // v4.1 adds url download capability via solo URL argument (same domain/CORS only)
        // v4.2 adds semantic variable names, long (over 2MB) dataURL support, and hidden by default temp anchors
        // https://github.com/rndme/download

        (function (root, factory) {
            if (typeof define === 'function' && define.amd) {
                // AMD. Register as an anonymous module.
                define([], factory);
            } else if (typeof exports === 'object') {
                // Node. Does not work with strict CommonJS, but
                // only CommonJS-like environments that support modu");
                WriteLiteral(@"le.exports,
                // like Node.
                module.exports = factory();
            } else {
                // Browser globals (root is window)
                root.download = factory();
            }
        }(this, function () {

            return function download(data, strFileName, strMimeType) {

                var self = window, // this script is only for browsers anyway...
                    defaultMime = ""application/octet-stream"", // this default mime also triggers iframe downloads
                    mimeType = strMimeType || defaultMime,
                    payload = data,
                    url = !strFileName && !strMimeType && payload,
                    anchor = document.createElement(""a""),
                    toString = function (a) { return String(a); },
                    myBlob = (self.Blob || self.MozBlob || self.WebKitBlob || toString),
                    fileName = strFileName || ""download"",
                    blob,
                    reader;
                myBlob");
                WriteLiteral(@" = myBlob.call ? myBlob.bind(self) : Blob;

                if (String(this) === ""true"") { //reverse arguments, allowing download.bind(true, ""text/xml"", ""export.xml"") to act as a callback
                    payload = [payload, mimeType];
                    mimeType = payload[0];
                    payload = payload[1];
                }


                if (url && url.length < 2048) { // if no filename and no mime, assume a url was passed as the only argument
                    fileName = url.split(""/"").pop().split(""?"")[0];
                    anchor.href = url; // assign href prop to temp anchor
                    if (anchor.href.indexOf(url) !== -1) { // if the browser determines that it's a potentially valid url path:
                        var ajax = new XMLHttpRequest();
                        ajax.open(""GET"", url, true);
                        ajax.responseType = 'blob';
                        ajax.onload = function (e) {
                            download(e.target.response, fileName, defaul");
                WriteLiteral(@"tMime);
                        };
                        setTimeout(function () { ajax.send(); }, 0); // allows setting custom ajax headers using the return:
                        return ajax;
                    } // end if valid url?
                } // end if url?


                //go ahead and download dataURLs right away
                if (/^data\:[\w+\-]+\/[\w+\-]+[,;]/.test(payload)) {

                    if (payload.length > (1024 * 1024 * 1.999) && myBlob !== toString) {
                        payload = dataUrlToBlob(payload);
                        mimeType = payload.type || defaultMime;
                    } else {
                        return navigator.msSaveBlob ?  // IE10 can't do a[download], only Blobs:
                            navigator.msSaveBlob(dataUrlToBlob(payload), fileName) :
                            saver(payload); // everyone else can save dataURLs un-processed
                    }

                }//end if dataURL passed?

                blob = payload instance");
                WriteLiteral(@"of myBlob ?
                    payload :
                    new myBlob([payload], { type: mimeType });


                function dataUrlToBlob(strUrl) {
                    var parts = strUrl.split(/[:;,]/),
                        type = parts[1],
                        decoder = parts[2] == ""base64"" ? atob : decodeURIComponent,
                        binData = decoder(parts.pop()),
                        mx = binData.length,
                        i = 0,
                        uiArr = new Uint8Array(mx);

                    for (i; i < mx; ++i) uiArr[i] = binData.charCodeAt(i);

                    return new myBlob([uiArr], { type: type });
                }

                function saver(url, winMode) {

                    if ('download' in anchor) { //html5 A[download]
                        anchor.href = url;
                        anchor.setAttribute(""download"", fileName);
                        anchor.className = ""download-js-link"";
                        anchor.innerHTML = ""downloading");
                WriteLiteral(@"..."";
                        anchor.style.display = ""none"";
                        document.body.appendChild(anchor);
                        setTimeout(function () {
                            anchor.click();
                            document.body.removeChild(anchor);
                            if (winMode === true) { setTimeout(function () { self.URL.revokeObjectURL(anchor.href); }, 250); }
                        }, 66);
                        return true;
                    }

                    // handle non-a[download] safari as best we can:
                    if (/(Version)\/(\d+)\.(\d+)(?:\.(\d+))?.*Safari\//.test(navigator.userAgent)) {
                        url = url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
                        if (!window.open(url)) { // popup blocked, offer direct download:
                            if (confirm(""Displaying New Document\n\nUse Save As... to download, then click back to return to this page."")) { location.href = url; }
                        }
");
                WriteLiteral(@"                        return true;
                    }

                    //do iframe dataURL download (old ch+FF):
                    var f = document.createElement(""iframe"");
                    document.body.appendChild(f);

                    if (!winMode) { // force a mime that will download:
                        url = ""data:"" + url.replace(/^data:([\w\/\-\+]+)/, defaultMime);
                    }
                    f.src = url;
                    setTimeout(function () { document.body.removeChild(f); }, 333);

                }//end saver




                if (navigator.msSaveBlob) { // IE10+ : (has Blob, but not a[download] or URL)
                    return navigator.msSaveBlob(blob, fileName);
                }

                if (self.URL) { // simple fast and modern way using Blob and URL:
                    saver(self.URL.createObjectURL(blob), true);
                } else {
                    // handle non-Blob()+non-URL browsers:
                    if (typeof blob === ""strin");
                WriteLiteral(@"g"" || blob.constructor === toString) {
                        try {
                            return saver(""data:"" + mimeType + "";base64,"" + self.btoa(blob));
                        } catch (y) {
                            return saver(""data:"" + mimeType + "","" + encodeURIComponent(blob));
                        }
                    }

                    // Blob but not URL support:
                    reader = new FileReader();
                    reader.onload = function (e) {
                        saver(this.result);
                    };
                    reader.readAsDataURL(blob);
                }
                return true;
            }; /* end download() */
        }));
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2ff46c2e23b948e819f65c81a1d99327fd47bd7030d1559a9f9c02cf3dce80e716013", async() => {
                WriteLiteral("\n    <app>\n        ");
#nullable restore
#line 213 "C:\Users\martin.pajpach\Downloads\AASX REST Server\src\AasxServerBlazor\Pages\_Host.cshtml"
    Write(await Html.RenderComponentAsync<App>(RenderMode.ServerPrerendered));

#line default
#line hidden
#nullable disable
                WriteLiteral("\n    </app>\n\n    <script src=\"_framework/blazor.server.js\"></script>\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n</html>\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Pages__Host> Html { get; private set; } = default!;
        #nullable disable
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages__Host> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Pages__Host>)PageContext?.ViewData;
        public Pages__Host Model => ViewData.Model;
    }
}
#pragma warning restore 1591
